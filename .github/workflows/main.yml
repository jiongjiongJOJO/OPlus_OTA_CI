name: Run Private Repo CI, Encrypt Output & Version Infos

on:
  schedule:
    - cron: '*/20 * * * *'
  workflow_dispatch:  # 允许手动触发

jobs:
  run-script-and-encrypt:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Public Repo (Repo B)
        uses: actions/checkout@v4

      - name: Checkout Private Repo (Repo A)
        uses: actions/checkout@v4
        with:
          repository: jiongjiongJOJO/OPlus_OTA
          token: ${{ secrets.PRIVATE_REPO_PAT }}
          path: private-repo-clone

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache-dependency-path: private-repo-clone/requirements.txt

      - name: Install dependencies
        run: |
          cd private-repo-clone
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run private script, capture output, and check for changes
        id: run_script_and_capture
        working-directory: private-repo-clone # 在私有仓库克隆的目录中执行
        run: |
          # 启用 'exit on error' 模式，任何命令失败都会导致脚本立即退出
          set -e

          OUTPUT_FILE="../private_script_stdout.log"
          
          echo "DEBUG: Current working directory for script execution: $(pwd)"
          echo "DEBUG: Expected output file path: $OUTPUT_FILE (relative to root)"
          echo "DEBUG: Absolute path for output file: $(readlink -f "$OUTPUT_FILE")"

          # 强制创建输出文件，确保它存在，即使脚本没有输出。
          # 这样可以避免 'No such file or directory' 错误，即使文件是空的。
          touch "$OUTPUT_FILE"
          chmod 644 "$OUTPUT_FILE" # 确保文件有读写权限
          
          echo "DEBUG: Output file created by touch (before script run):"
          ls -l "$OUTPUT_FILE"
          
          # 运行私有脚本，将其标准输出和标准错误都重定向到 OUTPUT_FILE
          # 如果 python 命令本身失败，set -e 会让此步骤立即失败
          echo "DEBUG: Running python run_all.py..."
          timeout 20m python run_all.py > "$OUTPUT_FILE" 2>&1
          echo "DEBUG: python run_all.py finished."
          
          echo "DEBUG: After script execution, checking actual output file status:"
          if [ -f "$OUTPUT_FILE" ]; then
            echo "DEBUG: File '$OUTPUT_FILE' exists."
            ls -l "$OUTPUT_FILE"
            # 为了调试，可以打印文件内容的前几行。请确保内容不包含高度敏感信息。
            # echo "DEBUG: Content of $OUTPUT_FILE (first 10 lines):"
            # head -n 10 "$OUTPUT_FILE"
          else
            echo "ERROR: File '$OUTPUT_FILE' DOES NOT EXIST after script execution! This indicates a problem with python run_all.py or redirection."
            # 打印当前目录和父目录内容，帮助排查
            echo "DEBUG: Contents of current directory (private-repo-clone):"
            ls -l .
            echo "DEBUG: Contents of parent directory (repo root):"
            ls -l ..
            exit 1 # 强制此步骤失败，如果文件不存在
          fi
          
          # 检查 version_infos 目录是否有修改
          if [[ $(git status --porcelain version_infos) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Found changes in version_infos. Preparing to encrypt and push."
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No changes found in version_infos. Skipping encryption and push of version_infos."
          fi
          
          # 检查 stdout 文件是否存在且不为空
          # 此时我们已经确保文件存在，这里只判断是否非空
          if [ -s "$OUTPUT_FILE" ]; then
            echo "has_stdout=true" >> $GITHUB_OUTPUT
            echo "Found stdout from script. Preparing to encrypt."
          else
            echo "has_stdout=false" >> $GITHUB_OUTPUT
            echo "No stdout from script or stdout file is empty. Skipping encryption of stdout."
          fi
          echo "DEBUG: has_stdout=${{ steps.run_script_and_capture.outputs.has_stdout }}"

      - name: Commit and push version_infos changes to Private Repo
        # 仅当 has_changes 为 true 时才执行此步骤
        if: steps.run_script_and_capture.outputs.has_changes == 'true'
        working-directory: private-repo-clone # 确保在私有仓库的克隆目录中执行
        run: |
          echo "Configuring Git user for commit..."
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          echo "Adding version_infos to Git staging area..."
          git add version_infos/
          
          # 检查是否有实际的暂存区变更，避免创建空提交
          if git diff --cached --quiet; then
            echo "No actual changes to commit in version_infos after git add. Skipping commit and push."
          else
            echo "Committing changes..."
            git commit -m "update version_infos."
            
            echo "Pushing changes to private repository..."
            # git push 将使用 actions/checkout 配置的 PAT 进行认证
            git push
            echo "Changes pushed successfully."
          fi

      - name: Install GnuPG
        # 仅当有需要加密的内容时才安装 GnuPG
        if: steps.run_script_and_capture.outputs.has_changes == 'true' || steps.run_script_and_capture.outputs.has_stdout == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg

      - name: Import GPG Public Key for Encryption
        # 仅当有需要加密的内容时才导入密钥
        if: steps.run_script_and_capture.outputs.has_changes == 'true' || steps.run_script_and_capture.outputs.has_stdout == 'true'
        run: |
          echo "${{ secrets.GPG_PUBLIC_KEY }}" | gpg --import
          gpg --list-keys # 验证公钥是否已导入 (可选，用于调试)

      - name: Archive and Encrypt All Sensitive Data
        # 仅当有需要加密的内容时才执行此步骤
        if: steps.run_script_and_capture.outputs.has_changes == 'true' || steps.run_script_and_capture.outputs.has_stdout == 'true'
        run: |
          ENCRYPTION_TEMP_DIR="to_encrypt_data"
          mkdir -p "$ENCRYPTION_TEMP_DIR"
          
          echo "DEBUG: Current working directory for encryption: $(pwd)"
          echo "DEBUG: Contents of current directory before archiving:"
          ls -l .
          
          # 1. 如果有 version_infos 变化，将其打包并放入临时目录
          if [ "${{ steps.run_script_and_capture.outputs.has_changes }}" == "true" ]; then
            echo "Archiving version_infos..."
            # 进入私有仓库克隆的目录，将 version_infos 目录打包
            cd private-repo-clone
            # 使用 -h (dereference) 来处理符号链接，如果 version_infos 内部有的话
            tar -czhf ../"$ENCRYPTION_TEMP_DIR"/version_infos_changes.tar.gz version_infos/
            cd .. # 回到工作目录根部
            echo "DEBUG: After archiving version_infos. Contents of $ENCRYPTION_TEMP_DIR:"
            ls -l "$ENCRYPTION_TEMP_DIR"/
          fi
          
          # 2. 如果有 stdout 输出，将其复制到临时目录
          if [ "${{ steps.run_script_and_capture.outputs.has_stdout }}" == "true" ]; then
            echo "Copying private_script_stdout.log..."
            # private_script_stdout.log 位于工作目录根部，所以直接复制
            cp private_script_stdout.log "$ENCRYPTION_TEMP_DIR"/
            echo "DEBUG: After copying stdout. Contents of $ENCRYPTION_TEMP_DIR:"
            ls -l "$ENCRYPTION_TEMP_DIR"/
          else
            echo "DEBUG: has_stdout was false, skipping copy of private_script_stdout.log."
          fi
          
          # 检查 to_encrypt_data 目录是否为空，如果为空则无需打包加密
          if [ -z "$(ls -A "$ENCRYPTION_TEMP_DIR")" ]; then
            echo "DEBUG: No content to encrypt. Skipping final archive and encryption."
            exit 0 # 正常退出，表示没有需要加密的内容
          fi

          # 3. 将临时目录下的所有内容打包成一个大的 tar.gz
          echo "Creating final archive for encryption..."
          tar -czf final_encrypted_data.tar.gz "$ENCRYPTION_TEMP_DIR"/
          
          # 4. 加密打包后的文件
          echo "Encrypting final archive..."
          gpg --batch --yes --trust-model always --encrypt --armor -r "${{ secrets.GPG_RECIPIENT_EMAIL }}" --output encrypted_ci_artifact.asc final_encrypted_data.tar.gz
          
          # 检查加密文件是否存在
          if [ -f "encrypted_ci_artifact.asc" ]; then
            echo "Encrypted artifact file created successfully."
          else
            echo "Error: Encrypted artifact file not found!"
            exit 1
          fi
          
          # 可选：显示加密文件的前几行（不显示敏感内容）
          echo "Encrypted output (first 10 lines):"
          head -n 10 encrypted_ci_artifact.asc

      - name: Upload Encrypted Artifact
        # 仅当有需要加密的内容时才上传
        if: steps.run_script_and_capture.outputs.has_changes == 'true' || steps.run_script_and_capture.outputs.has_stdout == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: encrypted-ci-output-and-version-infos
          path: encrypted_ci_artifact.asc
          retention-days: 7

      - name: Clean up sensitive files
        # 总是执行清理，即使前面步骤失败也要尝试清理
        if: always()
        run: |
          echo "Cleaning up sensitive files..."
          rm -rf private-repo-clone
          rm -f private_script_stdout.log
          rm -rf to_encrypt_data
          rm -f final_encrypted_data.tar.gz
          echo "Cleanup complete."
